{% for import in argument.imports %}import {{ import }}
{% endfor %}

{% macro associatedValueName caseAssociatedValue index %}{% if caseAssociatedValue.localName %}{{ caseAssociatedValue.localName }}{% else %}associatedValue{{ index }}{% endif %}{% endmacro %}
{% macro expandAssociatedValues array %}{% for value in array %}{% call associatedValueName value forloop.counter0 %}{{ ', ' if not forloop.last }}{% endfor %}{% endmacro %}
{% macro tuplifyAssociatedValues array typeName caseName %}{% if array.count > 1 or array[0].typeName|contains:"->" %}{% endif %}Gen<({% for value in array %}{{ value.typeName }}{{ ', ' if not forloop.last }}{% endfor %})>
                .zip({% for value in array %}{{ value.typeName }}.arbitrary{{ ', ' if not forloop.last }}{% endfor %})
                .map { {{ typeName }}.{{ caseName }}({% for value in array %}{{ value.localName }}: $0.{{ forloop.counter0 }}{{ ', ' if not forloop.last }}{% endfor %}) }{% endmacro %}
{% macro setAssociatedValues array %}{% for value in array %}{% if value.localName %}{{ value.localName }}: {% endif %}($0){% if array.count > 1 %}.{{ forloop.counter0 }}{% endif %}{{ ', ' if not forloop.last }}{% endfor %}{% endmacro %}
{% macro caseOptics accessLevel case typeName %}
{% if case.hasAssociatedValue %}
    {% if case.associatedValues.count > 1 %}
            (1, {% call tuplifyAssociatedValues case.associatedValues typeName case.name %}){{ ',' if not forloop.last }}
    {% else %}
            (1, {{ case.associatedValues[0].typeName }}.arbitrary.map { {{ typeName }}.{{ case.name }}({% call setAssociatedValues case.associatedValues %}) }){{ ',' if not forloop.last }}
    {% endif %}
{% else %}
            (1, .pure({{ typeName }}.{{ case.name }})){{ ',' if not forloop.last }}
{% endif %}
{% endmacro %}
{% for type in types.enums where type.based.ArbitraryEnum or type|annotated:"ArbitraryEnum" %}{% if type.name != "ArbitraryEnum" %}
extension {{ type.name }}: Arbitrary {
    public static var arbitrary: Gen<{{ type.name }}> {
        return .frequency([
{% for case in type.cases %}
    {% call caseOptics type.accessLevel case type.name %}
{% endfor %}
        ])
    }
}
{% endif %}
{% endfor %}
